# This is a YAML-formatted file.
# Declare variables to be passed into STACKn templates.

# REQUIREMENT: 
# - set a storage class with ability to serve ReadWriteOnce
#   Name: storageClassName, and/or set anchor &Å›torage_class
#   Description: Set a storage class for the resources that are reused for multi-mount-points in cluster. To reduce wasteful copying we allow to use the same dataset volume to be mounted multiple times.
#   Default: microk8s-hostpath, use local-path for k3s/Rancher Desktop

#Set global values to overide default
environment: "remote"
# Template for remote development
# Storage class used by the KTH cluster
storageClass: &storage_class ontap-nas
#storageClass: &storage_class local-path
#storage access mode
access_mode: &access_mode ReadWriteMany
#access_mode: &access_mode ReadWriteOnce

global:
  studio:
    superUser: "" ##these are currently not handled by stackn: default: admin
    superuserPassword: ""
    superuserEmail: ""  ##these are currently not handled by stackn: default: admin@test.com
    existingSecret: ""
    storageClass: *storage_class
  postgresql:
      auth:
        username: studio
        password: ""
        postgresPassword: ""
        database: studio
        existingSecret: ""
      storageClass: *storage_class

namespace: default
existingSecret: ""
serviceAccount:
  create: true
  automountServiceAccountToken: true
rbac:
  create: true

commonLabels: {}
commonAnnotations: {}

networkPolicy:
  enable: false
  kubernetes:
    cidr: # To get kubernetes api server endpoints run: $ kubectl get endpoints kubernetes
    port: 6443 
  internal_cidr: # in-cluster IpBlock cidr, used in allow-internet-[egress|ingress] policy, e.g:
    - 10.0.0.0/8
    - 192.168.0.0/16
    - 172.0.0.0/20
  ingress_controller_namespace: kube-system


studio:
  servicename: studio
  replicas: 1
  strategy:
    type: RollingUpdate
  debug: false
  init: true
  reset_db: false
  enable_project_extra_settings: false
  inactive_users: False
  custom_apps:
    enabled: true
    apps:
    - "common"
  custom_migrations:
    enabled: false
    apps:
      user: "studio.migrations.user"
      control: "studio.migrations.control"
  auth_user_model:
    override: false
    model: "user.User"
  csrf_trusted_origins: 
  kubeconfig_file: /app/kubeconfig/config
  kubeconfig_dir: /app/kubeconfig/
  kube_api_request_timeout: 1
  static:
    replicas: 1
    strategy:
      type: Recreate
    image: ghcr.io/scilifelabdatacentre/serve/serve-ingress:develop-20240417
    pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 1
        memory: "512Mi"
      requests:
        cpu: "100m"
        memory: "256Mi"
  image:
    repository: ghcr.io/scilifelabdatacentre/serve/serve-studio:develop-20240417
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: "1000m"
      memory: "4Gi"
    requests:
      cpu: "400m"
      memory: "2Gi"
  storage:
    storageClass: *storage_class
  media:
    storage:
      storageClass: *storage_class
      size: "5Gi"
      accessModes: *access_mode
      claimName: studio-media
      mountStudio: false
    mount_path: /app/media/
  superUser: admin
  superuserPassword: ""
  superuserEmail: admin@serve.scilifelab.se
  djangoAdminUrlPath: "admin"
  eventUser: ""
  eventuserPassword: ""
  eventuserEmail: event_user@serve.scilifelab.se
  version: studio
  securityContext:
    enabled: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    allowPrivilegeEscalation: false
    privileged: false
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 8080
    initialDelaySeconds: 20
    periodSeconds: 10
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 8080
    initialDelaySeconds: 20
    periodSeconds: 20
  djangoSecret: ''
  emailService:
    enabled: false
    host: ''
    port: 587
    hostUser: ''
    hostPassword: ''
    smtpEmailFrom: ''
    domainName: ''
    apiEndpoint: ''
    apiKey: ''
    notifyOnAccountRegisterList:
      - ''
    googleServiceAccount:
      type: ''
      project_id: ''
      private_key_id: ''
      private_key: ''
      client_email: ''
      client_id: ''
      auth_uri: ''
      token_uri: ''
      auth_provider_x509_cert_url: ''
      client_x509_cert_url: ''
      universe_domain: ''
  disabledAppInstanceFields:
    enabled: false
    fields:
      - ''
  connectionPool:
    enabled: true
    minSize: 2
    maxSize: 4
    timeout: 10
  githubApiToken:

#kubernetes config
kubeconfig: ""

accessmode: *access_mode
#the cluster domain name (default usually cluster.local)
cluster_domain: cluster.local

# Enable ingress if you want to access the studio solution from a kubernetes host/localhost.
domain: studio.127.0.0.1.nip.io
session_cookie_domain: .127.0.0.1.nip.io
ingress:
  enabled: true
  annotations: {}
  hosts:
    - host: studio.127.0.0.1.nip.io
  # setup TLS if you have a platform certificate or use 'tls-acme' if you have certbot deployed and want to generate a certificate.
  tls:
    - secretName: prod-ingress
      hosts:
        - studio.127.0.0.1.nip.io
  # Enable or disable access to the django admin interface from the university network
  djangoAdminAccessRestriction:
    enabled: true
    # IP address range to allow access to the django admin interface
    whiteListSourceRange: 130.238.0.0/16

### A Postgres database for STACKn ###
# Here we use https://charts.bitnami.com/bitnami postgresql chart 

# Postgres deploy with a single-pod database:
postgresql:
  enabled: true
  fullnameOverride: studio-postgres
  commonAnnotations: {"reloader.stakater.com/auto": "true"}
  auth:
    username:
    password:
    postgresPassword:
    database: studio
  primary:
    service:
      ports: 
        postgresql: 5432
    extraEnvVars:
      - name: POSTGRESQL_MAX_CONNECTIONS
        value: "300"
    persistence:
      enabled: true
      size: "10Gi"
      accessModes:
        - *access_mode
      storageClass: *storage_class
    podLabels: {"app":"stackn-studio"}

redis:
  enabled: true
  commonAnnotations: {"reloader.stakater.com/auto": "true"}
  master:
    podLabels: {"app":"stackn-studio"}
  replica:
    replicaCount: 1
    podLabels: {"app":"stackn-studio"}

rabbitmq:
  enabled: true
  commonAnnotations: {"reloader.stakater.com/auto": "true"}
  podLabels: {"app":"stackn-studio","allow-api-access": "true"}
  persistence:
    enabled: true

# Will be added in future release, for now keep "enabled:false"
postgresql-ha:
  enabled: false

celeryWorkers:
  replicas: 2
  resources:
    requests:
      cpu: "100m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "8Gi"

celeryFlower:
  enabled: true

# default credentials for rabbitmq. override in production!
rabbit:
  image: rabbitmq:3-management
  username: admin
  password: ""

chartcontroller:
  enabled: false
  #addSecret -- if true create chart-controller-secret from cluster_config, if false it must be added manually
  addSecret: false

docker-registry:
  enabled: false

prometheus:
  enabled: false

grafana:
  enabled: false

reloader:
  enabled: true
  
  reloader:
    watchGlobally: false

eventListener:
  image: ghcr.io/scilifelabdatacentre/serve-event-listener/event-listener:v1.1.0
  resources:
    requests:
      cpu: "100m"
      memory: "1Gi"
    limits:
      cpu: "500m"
      memory: "2Gi"

loki:
    enabled: true
    namespace: loki-stack
    host: http://loki-gateway.loki-stack.svc.cluster.local # assumes loki deployed separately in loki-stack namespace with loki helm chart
